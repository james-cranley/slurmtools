#!/usr/bin/env python3
"""
tenacity â€“ resource-aware SLURM watcher with robust array support (classic & modern SLURM)
"""

import argparse, os, re, subprocess, sys, time

def run(cmd):
    return subprocess.check_output(cmd, text=True, stderr=subprocess.DEVNULL)

def is_final(state):
    # Any state that is not PENDING or RUNNING is final
    return not (state in ('PENDING', 'RUNNING'))

def poll_single(job, poll):
    while True:
        time.sleep(poll)
        out = run(['sacct','-j',job,'-P','--format=JobID,State,ExitCode,Reason'])
        lines = out.strip().split('\n')[1:]
        if not lines:
            continue
        state, exitc, rsn = lines[0].split('|')[1:]
        if is_final(state):
            # Wait for database update lag
            time.sleep(poll)
            out = run(['sacct','-j',job,'-P','--format=JobID,State,ExitCode,Reason'])
            state, exitc, rsn = out.strip().split('\n')[1].split('|')[1:]
            return state, exitc, rsn or ''

def poll_array(parent, poll):
    def get_kids():
        try:
            out = run(['sacct','-j',parent,'-P','--format=JobID,ArrayJobID,State,ExitCode,Reason'])
            rows = [ln.split('|') for ln in out.strip().split('\n')[1:] if ln]
            kids = [r for r in rows if r[1] == parent and re.match(rf"{parent}_[0-9]+(\+)?$", r[0])]
            if not kids:
                raise Exception("No array children found via ArrayJobID, try fallback")
        except Exception:
            out = run(['sacct','-j',parent,'-P','--format=JobID,State,ExitCode,Reason'])
            rows = [ln.split('|') for ln in out.strip().split('\n')[1:] if ln]
            kids = [r for r in rows if re.match(rf"{parent}_[0-9]+(\+)?$", r[0])]
        return kids

    while True:
        kids = get_kids()
        main_kids = [r for r in kids if re.match(rf"{parent}_[0-9]+$", r[0])]
        if not main_kids or any(not is_final(r[1]) for r in main_kids):
            time.sleep(poll)
            continue
        # Wait for db lag: re-poll once more
        time.sleep(poll)
        kids = get_kids()
        main_kids = [r for r in kids if re.match(rf"{parent}_[0-9]+$", r[0])]
        if not main_kids or any(not is_final(r[1]) for r in main_kids):
            continue
        return main_kids  # Only return when all main array tasks have final states

def parse_head(f):
    d={'gpu':False,'cores':1,'h':0,'m':0,'array':None,'logdir':'./logs'}
    for ln in open(f):
        if '--gres=gpu' in ln: d['gpu']=True
        if ln.startswith('#SBATCH -c'): d['cores']=int(ln.split()[2])
        if ln.startswith('#SBATCH -n'): d['cores']=int(ln.split()[2])
        if ln.startswith('#SBATCH -t'):
            h,*mm=ln.split()[2].split(':'); d['h']=int(h); d['m']=int(mm[0] if mm else 0)
        if ln.startswith('#SBATCH --array'): d['array']=ln.split('=')[1].strip()
        if ln.startswith('#SBATCH -o'):
            p=ln.split()[-1].strip("'\"").split('%')[0]
            d['logdir']=os.path.abspath(os.path.join(os.path.dirname(f),os.path.dirname(p)))
    return d

def make_retry(src,cores,h,m,array,tag,wd,logdir):
    dst=os.path.join(logdir,tag+'.sh')
    with open(src) as r, open(dst,'w') as w:
        for ln in r:
            if ln.startswith('#SBATCH -c'): w.write(f'#SBATCH -c {cores}\n')
            elif ln.startswith('#SBATCH -t'): w.write(f'#SBATCH -t {h:02d}:{m:02d}:00\n')
            elif ln.startswith('#SBATCH --array') and array is not None:
                w.write(f'#SBATCH --array={array}\n')
            elif ln.startswith('#SBATCH -D'):
                w.write(f'#SBATCH -D {wd}\n')
            else: w.write(ln)
        if not any(l.startswith('#SBATCH -D') for l in open(src)):
            w.write(f'#SBATCH -D {wd}\n')
    return dst

def sbatch(path): return run(['sbatch',path]).split()[-1]

def is_success(state):
    return state.startswith('COMPLETED')

def is_timeout(state, reason):
    return state.startswith('TIMEOUT') or 'TimeLimit' in reason

def is_oom(state, exitcode, reason):
    return state.startswith('OUT_OF_ME') or 'OutOfMemory' in reason or exitcode.startswith('137')

# CLI
P=argparse.ArgumentParser()
P.add_argument('-s','--slurm',required=True); P.add_argument('--jobid')
P.add_argument('--max-retries',type=int,default=3)
P.add_argument('--time-increment',type=int,default=2); P.add_argument('--max-hours',type=int,default=24)
P.add_argument('--core-increment',type=int,default=2); P.add_argument('--max-cores',type=int,default=16)
P.add_argument('--poll',type=int,default=60)
A=P.parse_args()
SCRIPT=os.path.abspath(A.slurm); WD=os.path.dirname(SCRIPT)
head=parse_head(SCRIPT); LOGDIR=head['logdir']; os.makedirs(LOGDIR,exist_ok=True)
log=open(os.path.join(LOGDIR,'tenacity.log'),'a')
cur=SCRIPT; jobid=A.jobid; retry=0

while retry<=A.max_retries:
    h,m,cores,gpu,arr=head['h'],head['m'],head['cores'],head['gpu'],head['array']
    log.write(f'[try{retry}] {cores}c {h}h{m}m gpu={gpu} array={arr}\n'); log.flush()
    if retry==0 and jobid: log.write(f'watching {jobid}\n'); log.flush()
    else: jobid=sbatch(cur); log.write(f'submitted {jobid}\n'); log.flush()
    if arr:
        main_kids = poll_array(jobid, A.poll)
        # For debugging: log all task states
        for mk in main_kids:
            log.write(f'  {mk[0]}: {mk[1]}, exit={mk[2]}, reason={mk[3]}\n')
        bad     = [k for k in main_kids if not is_success(k[1])]
        bad_to  = [k for k in bad if is_timeout(k[1], k[3])]
        bad_oom = [k for k in bad if is_oom(k[1], k[2], k[3]) and not gpu]
        if not bad:
            log.write('SUCCESS\n')
            break
        new_idx = ','.join(k[0].split('_')[-1] for k in bad)
        log.write(f'will retry indices: {new_idx}\n')
        log.flush()
        if bad_to:
            total=h*60+m + A.time_increment*60
            if total>A.max_hours*60: log.write('time cap reached\n'); break
            h,m=divmod(total,60)
        if bad_oom:
            if cores+A.core_increment>A.max_cores: log.write('core cap hit\n'); break
            cores+=A.core_increment
        retry+=1
        cur=make_retry(cur,cores,h,m,new_idx,f'RETRY{retry}',WD,LOGDIR)
        head=parse_head(cur); continue
    else:  # non-array
        state,exitc,reason=poll_single(jobid,A.poll)
        log.write(f'  job: {jobid} state={state} exit={exitc} reason={reason}\n')
        if is_success(state): log.write('SUCCESS\n'); break
        if is_timeout(state, reason):
            total=h*60+m + A.time_increment*60
            if total>A.max_hours*60: log.write('time cap\n'); break
            h,m=divmod(total,60); retry+=1
            cur=make_retry(cur,cores,h,m,None,f'TO{retry}',WD,LOGDIR)
            head=parse_head(cur); continue
        if is_oom(state, exitc, reason) and not gpu:
            if cores+A.core_increment>A.max_cores: log.write('core cap\n'); break
            cores+=A.core_increment; retry+=1
            cur=make_retry(cur,cores,h,m,None,f'OOM{retry}',WD,LOGDIR)
            head=parse_head(cur); continue
        log.write('non-retryable\n'); break
log.close()