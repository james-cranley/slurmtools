#!/usr/bin/env python
"""
sbatcher.py  â€“  submit a SLURM script and launch tenacity in a screen session
usage: sbatcher.py mysbatch.sh [extra tenacity args]
"""
import argparse, os, re, shlex, subprocess, sys, textwrap, socket

def check_login_node():
    hn = socket.gethostname().lower()
    if 'login' not in hn:
        sys.exit(f"Error: sbatcher must be run on a login node (found: {hn}).\n"
                 "This check avoids accidental job submission from a compute node.\n"
                 "If you believe this is an error, edit sbatcher.py to adjust the check.")

def parse_args() -> argparse.Namespace:
    p = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent(__doc__))
    p.add_argument('slurm', help='SLURM batch script')
    p.add_argument('extra', nargs=argparse.REMAINDER, help='extra args passed to tenacity')
    return p.parse_args()

def extract_logdir(sbatch_file: str) -> str:
    with open(sbatch_file) as fh:
        for ln in fh:
            if re.match(r'\s*#SBATCH\s+-o', ln):
                path = ln.split()[-1].strip('\'"')
                path = os.path.expandvars(path)
                path = path.split('%')[0]
                logdir = os.path.dirname(path) or '.'
                if not os.path.isabs(logdir):
                    logdir = os.path.normpath(os.path.join(os.path.dirname(sbatch_file), logdir))
                return logdir
    return os.path.normpath(os.path.join(os.path.dirname(sbatch_file), 'logs'))

def run(cmd: str) -> str:
    print(f'[sbatcher] $ {cmd}')
    return subprocess.check_output(cmd, shell=True, text=True)

def main() -> None:
    check_login_node()
    a = parse_args()
    sbatch_script = os.path.abspath(a.slurm)
    if not os.path.isfile(sbatch_script):
        sys.exit(f'Error: {sbatch_script} not found')

    logdir = extract_logdir(sbatch_script)
    os.makedirs(logdir, exist_ok=True)
    subprocess.run(['cp', sbatch_script, logdir], check=True)
    print(f'[sbatcher] logdir = {logdir}')

    submit_out = run(f'sbatch {shlex.quote(sbatch_script)}')
    jobid = submit_out.strip().split()[-1]
    print(f'Submitted {sbatch_script} as SLURM job {jobid}')

    screen_name = f'tenacity.{jobid}'
    tenacity_cmd = ['tenacity', '-s', sbatch_script, '--jobid', jobid, *a.extra]
    tenacity_cmd = ' '.join(map(shlex.quote, tenacity_cmd))
    screen_cmd = (
        f'screen -dmS {screen_name} bash -c '
        f'"{tenacity_cmd} &> {os.path.join(logdir, "tenacity_screen.log")}"'
    )
    run(screen_cmd)

    print(f'Started tenacity watcher in screen session: {screen_name}')
    print('---------------------------------------------')
    print(f'attach :  screen -r {screen_name}')
    print(f'kill   :  screen -S {screen_name} -X quit')
    print(f'logs   :  less {os.path.join(logdir, "tenacity_screen.log")}')
    print('---------------------------------------------')

if __name__ == '__main__':
    main()